// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using DalUsuarios.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace DalUsuarios.Models
{
    public partial class PruebaTecnicaContext
    {
        private IPruebaTecnicaContextProcedures _procedures;

        public virtual IPruebaTecnicaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PruebaTecnicaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPruebaTecnicaContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class PruebaTecnicaContextProcedures : IPruebaTecnicaContextProcedures
    {
        private readonly PruebaTecnicaContext _context;

        public PruebaTecnicaContextProcedures(PruebaTecnicaContext context)
        {
            _context = context;
        }

        public virtual async Task<int> SpAddUsuariosAsync(string nombre, string apellido, string cedula, string correoElectronico, string contrasena, int? puntaje, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Apellido",
                    Size = 100,
                    Value = apellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cedula",
                    Size = 15,
                    Value = cedula ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CorreoElectronico",
                    Size = 100,
                    Value = correoElectronico ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contrasena",
                    Size = 300,
                    Value = contrasena ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Puntaje",
                    Value = puntaje ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SpAddUsuarios] @Nombre = @Nombre, @Apellido = @Apellido, @Cedula = @Cedula, @CorreoElectronico = @CorreoElectronico, @Contrasena = @Contrasena, @Puntaje = @Puntaje", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SpDeleteUsuarioAsync(int? idUsuario, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SpDeleteUsuario] @IdUsuario = @IdUsuario", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpGetUsuariosResult>> SpGetUsuariosAsync(string cedula, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Cedula",
                    Size = 15,
                    Value = cedula ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpGetUsuariosResult>("EXEC @returnValue = [dbo].[SpGetUsuarios] @Cedula = @Cedula", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpIniciarSesionResult>> SpIniciarSesionAsync(string correoElectronico, string contrasena, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CorreoElectronico",
                    Size = 100,
                    Value = correoElectronico ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contrasena",
                    Size = 300,
                    Value = contrasena ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpIniciarSesionResult>("EXEC @returnValue = [dbo].[SpIniciarSesion] @CorreoElectronico = @CorreoElectronico, @Contrasena = @Contrasena", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SpRegistrarUsuarioResult>> SpRegistrarUsuarioAsync(string nombre, string apellido, string cedula, string correoElectronico, string contrasena, int? puntaje, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Apellido",
                    Size = 100,
                    Value = apellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cedula",
                    Size = 15,
                    Value = cedula ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CorreoElectronico",
                    Size = 100,
                    Value = correoElectronico ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contrasena",
                    Size = 300,
                    Value = contrasena ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Puntaje",
                    Value = puntaje ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SpRegistrarUsuarioResult>("EXEC @returnValue = [dbo].[SpRegistrarUsuario] @Nombre = @Nombre, @Apellido = @Apellido, @Cedula = @Cedula, @CorreoElectronico = @CorreoElectronico, @Contrasena = @Contrasena, @Puntaje = @Puntaje", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SpUpdateUsuariosAsync(string nombre, string apellido, string cedula, string correoElectronico, string contrasena, int? puntaje, int? idUsuario, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Apellido",
                    Size = 100,
                    Value = apellido ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Cedula",
                    Size = 15,
                    Value = cedula ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CorreoElectronico",
                    Size = 100,
                    Value = correoElectronico ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contrasena",
                    Size = 300,
                    Value = contrasena ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Puntaje",
                    Value = puntaje ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IdUsuario",
                    Value = idUsuario ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SpUpdateUsuarios] @Nombre = @Nombre, @Apellido = @Apellido, @Cedula = @Cedula, @CorreoElectronico = @CorreoElectronico, @Contrasena = @Contrasena, @Puntaje = @Puntaje, @IdUsuario = @IdUsuario", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
